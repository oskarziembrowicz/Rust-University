fn main() {
	let a: i32 = 12;
	let b: u16 = 7;
	println!("{}", a+b as i32);

	let a: f32 = 2.5;
	let b: f64 = -1.0;
	println!("{}", a+b as f32);

	println!("{}", f32::MAX);
	println!("{}", u8::MAX);
	println!("{}", i16::MAX);
	println!("{}", u8::MIN);
	println!("{}", i16::MIN);
	println!("{}", f32::MIN);
	//println!("{}", f32::);	//nieskończoność?

	println!("{}", isize::MAX);
	println!("{}", isize::MIN);
	println!("{}", usize::MAX);
	println!("{}", usize::MIN);

	println!("{}", usize::MAX as u128 == i32::MAX as u128);

	println!("{}", 64 as char);
	println!("{}", '@' as u8);
	println!("{}", b'a');

	for i in 1..20 {
		println!("{i}");
		let x: i8 = i;
	}
}

=============================================

fn main(){
	for i in 1..10 {
		println!("{i}");
		let x: i8 = i;	//RUST wnioskuje typy, które nie są podane
		let x: u32 = i;
		let x: i64 = i;
	}
}

==============================================

fn tabela_funkcji(f: fn(f64)) -> f64, a: f64, b:f64, h: f64 {
    let mut x = a;
    while x <= b {
        println!("f({}) = {}", x, f(x));
        x += h;
    }
}

fn f(x: f64) -> f64 {
    x*x + 2.5*x - 7.8
}

fn main(){
	tabela_funkcji(f1, 0.5, 0.3, 0.1);
}

===============================================

//klipi, clipy, clypy

=================================
fn powiekszone_o_1(x: i32) -> i32 {
    x + 1   
}

fn powieksz_o_1(x: &mut i32) {
    *x += 1;   
}

fn main() {
    let mut a = 12;
    let b = powiekszone_o_1(a);
    println!("{}", b == 13);
    
    powieksz_o_1(&mut a);
    println!("{}", a == 13);
}

======================================

fn powitaj(imie: &str){
    println!("Cześć, {imie}.");
}

fn main(){
    let imie = "Edek";
    powitaj(imie);
    
    let inne_imie: String = "Felek".to_string();
    powitaj(&inne_imie);
}

==========================================
fn wyswietl(t: &[i32]) {
    println!("{:?}");
}

fn main() {
    let tablica = [1, 3, 4, 16];
    wyswietl(&tablica);
}